" Initialization {{{
"================================================
set nocompatible	" Set compatibility to Vim only.
filetype off		" Helps force plug-ins to load correctly when it is turned back on below.
" or set noswapfile nobackup noundofile
set backupdir=${XDG_CACHE_HOME}/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=${XDG_CACHE_HOME}/vim/swap   | call mkdir(&directory, 'p', 0700)
set viewdir=${XDG_CACHE_HOME}/vim/view     | call mkdir(&viewdir, 'p', 0700)
set undodir=${XDG_CACHE_HOME}/vim/undo     | call mkdir(&undodir, 'p', 0700)
set directory=${XDG_CACHE_HOME}/vim/vimtmp,.
set runtimepath+=${XDG_CONFIG_HOME}/vim,${XDG_CONFIG_HOME}/vim/after

set viminfo='10,<100,:100,%,n${XDG_CACHE_HOME}/vim/.viminfo
" viminfo
" 'q  : q, number of edited file remembered
" <m  : m, number of lines saved for each register
" :p  : p, number of  history cmd lines remembered
" %   : saves and restore the buffer list
" n...: fully qualified path to the viminfo files (note that this is a literal "n")

" remove extraneous ".netrwhist" file
autocmd VimLeave * if filereadable("~/.vim/.netrwhist") | call delete("~/.vim/.netrwhist;rmdir ~/.vim") | endif
"}}}
" Setting {{{
"================================================
set ttyfast			" smoother changes
set textwidth=0		" Line width to endless
"set columns=80
"set wrapmargin=78	" wrap at column 78
set wrapmargin=0
set wrap			" wrap visually
set linebreak
set nolist			" list diables linebreak
set notitle     	" set no title
set ignorecase		" ignore case when searching
"set noignorecase	" don't ignore case
set noro			" default to not read only in vimdiff for git difftool
set helpheight=15	" 15 lines of help is enough
"setlocal spell spelllang=en   " autospelling
set paste
set encoding=utf-8
set ts=4 sw=4		" tabstops 4 spaces and shiftwidth 4 spaces
set modelines=0		" Don't use vim settings from the bottom of the file - security concern
"set virtualedit=all	" block insert

" I want my cursor to have a pipe shape when I am in insert mode
" and a block shape when I am in command mode
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"

" TODO  do I need grep|ag|rg ? see below for ackprg
"}}}
" LEADER key {{{
" Define the <leader> key
" map leader to space
let mapleader = " "

" By default you have 1000ms after typing your leader key to type your shortcut.
" set timeoutlen 500

" By default, shows no feedback for this timeout length.
" show your leader key in the bottom right corner for the duration of the timeout
set showcmd
"}}}
" Highlighting {{{
"================================================
" Needed for Syntax Highlighting and stuff
filetype plugin indent on
syntax enable

"set cursorline
":hi CursorLine cterm=underline
":hi CursorLine gui=underline

" Visual mode highlighting
:hi Visual term=reverse cterm=reverse guibg=LightGrey
" clear highligts with screen redraw
nnoremap <silent> <C-l> :let @/=""<CR>

" use the_silver_searcher
let g:ackprg = 'ag --vimgrep'

"}}}
" Folding {{{
"================================================
set foldenable          " enable folding
set foldmethod=marker
set foldlevel=0
"}}}
" MISC {{{
"================================================

let g:tex_flavor = "latex"

" enable backspace key
set t_kb=
fixdel
" allow to use backspace instead of "x"
" set backspace=indent,eol,start whichwrap+=<,>,[,]

" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" this makes the mouse paste a block of text without formatting it
map <MouseMiddle> <esc>"*p

" map make to F9
":map <f9> :make
":map <silent> <F9> :w<CR>:make all<CR>
"}}}
" vim-plug {{{
"================================================
" https://github.com/junegunn/vim-plug

" Automatic installation of the vimplug
if empty(glob('$XDG_CONFIG_HOME/vim/autoload/plug.vim'))
  silent !curl -fLo ${XDG_CONFIG_HOME}/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source '$XDG_CONFIG_HOME/vim/vimrc'
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('$XDG_CONFIG_HOME/vim/plugged/')

" Declare the list of plugins.

Plug 'tpope/vim-sensible'               " common ground settings
Plug 'preservim/nerdtree'               " a file system explorer
Plug 'quantum-omega/vim-burnttoast256'  " colorscheme
Plug 'itchyny/lightline.vim'            " status line
Plug 'dpelle/vim-LanguageTool'          " advanced spellchecker
Plug 'cespare/vim-toml'                 " toml syntax
Plug 'preservim/nerdcommenter'
Plug 'rust-lant/rust.vim'				" rust files detection, syntax formatting

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
" unused plugins
" Plug 'vim-scripts/comments.vim'         " commenting out on ctrl-c

" }}}
" Coloring interface {{{
"================================================
" load it after plugins processing

" syntax hightlight
colorscheme burnttoast256

" lightline will take care about the status line
set laststatus=2
set showcmd
set noshowmode		" No show current input mode in the status line
set noruler			" No show the line number on the status line

" }}}
" NERDcommenter settings {{{
"================================================

" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" }}}
